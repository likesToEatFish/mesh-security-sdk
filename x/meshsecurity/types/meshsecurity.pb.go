// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/meshsecurity/v1beta1/meshsecurity.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VirtualStakingMaxCapInfo stores info about
// virtual staking max cap
type VirtualStakingMaxCapInfo struct {
	// Contract is the address of the contract
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	// Delegated is the total amount currently delegated
	Delegated types.Coin `protobuf:"bytes,2,opt,name=delegated,proto3" json:"delegated"`
	// Cap is the current max cap limit
	Cap types.Coin `protobuf:"bytes,3,opt,name=cap,proto3" json:"cap"`
}

func (m *VirtualStakingMaxCapInfo) Reset()         { *m = VirtualStakingMaxCapInfo{} }
func (m *VirtualStakingMaxCapInfo) String() string { return proto.CompactTextString(m) }
func (*VirtualStakingMaxCapInfo) ProtoMessage()    {}
func (*VirtualStakingMaxCapInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_53771980e3e4256c, []int{0}
}
func (m *VirtualStakingMaxCapInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VirtualStakingMaxCapInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VirtualStakingMaxCapInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VirtualStakingMaxCapInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualStakingMaxCapInfo.Merge(m, src)
}
func (m *VirtualStakingMaxCapInfo) XXX_Size() int {
	return m.Size()
}
func (m *VirtualStakingMaxCapInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualStakingMaxCapInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualStakingMaxCapInfo proto.InternalMessageInfo

// Params defines the parameters for the x/meshsecurity module.
type Params struct {
	// TotalContractsMaxCap is the maximum that the sum of all contract max caps
	// must not exceed
	TotalContractsMaxCap types.Coin `protobuf:"bytes,1,opt,name=total_contracts_max_cap,json=totalContractsMaxCap,proto3" json:"total_contracts_max_cap"`
	// Epoch length is the number of blocks that defines an epoch
	EpochLength uint32 `protobuf:"varint,2,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	// MaxGasEndBlocker defines the maximum gas that can be spent in a contract
	// sudo callback
	MaxGasEndBlocker uint32 `protobuf:"varint,3,opt,name=max_gas_end_blocker,json=maxGasEndBlocker,proto3" json:"max_gas_end_blocker,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_53771980e3e4256c, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// SlashInfo defines info event from slashing
type SlashInfo struct {
	InfractionHeight int64  `protobuf:"varint,1,opt,name=infraction_height,json=infractionHeight,proto3" json:"infraction_height,omitempty"`
	Power            int64  `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	TotalSlashAmount string `protobuf:"bytes,3,opt,name=total_slash_amount,json=totalSlashAmount,proto3" json:"total_slash_amount,omitempty"`
	SlashFraction    string `protobuf:"bytes,4,opt,name=slash_fraction,json=slashFraction,proto3" json:"slash_fraction,omitempty"`
	TimeInfraction   int64  `protobuf:"varint,5,opt,name=time_infraction,json=timeInfraction,proto3" json:"time_infraction,omitempty"`
}

func (m *SlashInfo) Reset()         { *m = SlashInfo{} }
func (m *SlashInfo) String() string { return proto.CompactTextString(m) }
func (*SlashInfo) ProtoMessage()    {}
func (*SlashInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_53771980e3e4256c, []int{2}
}
func (m *SlashInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashInfo.Merge(m, src)
}
func (m *SlashInfo) XXX_Size() int {
	return m.Size()
}
func (m *SlashInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SlashInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VirtualStakingMaxCapInfo)(nil), "osmosis.meshsecurity.v1beta1.VirtualStakingMaxCapInfo")
	proto.RegisterType((*Params)(nil), "osmosis.meshsecurity.v1beta1.Params")
	proto.RegisterType((*SlashInfo)(nil), "osmosis.meshsecurity.v1beta1.SlashInfo")
}

func init() {
	proto.RegisterFile("osmosis/meshsecurity/v1beta1/meshsecurity.proto", fileDescriptor_53771980e3e4256c)
}

var fileDescriptor_53771980e3e4256c = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0xa4, 0xad, 0xc8, 0x96, 0x96, 0x74, 0x1b, 0x09, 0x13, 0x55, 0x6e, 0x89, 0x84,
	0xa8, 0x80, 0xd8, 0x0a, 0xdc, 0x2a, 0x81, 0x44, 0x22, 0xfe, 0x54, 0x02, 0x09, 0xb9, 0x52, 0x0f,
	0x5c, 0xcc, 0xd8, 0xd9, 0xda, 0xab, 0xd8, 0xbb, 0x96, 0x77, 0x03, 0xe9, 0x2b, 0x70, 0xe2, 0x11,
	0x38, 0x72, 0x42, 0x3c, 0x46, 0x0e, 0x1c, 0x72, 0xe4, 0x84, 0x20, 0x39, 0xc0, 0x63, 0x20, 0xef,
	0xc6, 0x89, 0x72, 0xeb, 0x25, 0xda, 0xfd, 0xcd, 0x7e, 0x33, 0xdf, 0x4c, 0x3c, 0xd8, 0x13, 0x32,
	0x13, 0x92, 0x49, 0x2f, 0xa3, 0x32, 0x91, 0x34, 0x1a, 0x15, 0x4c, 0x5d, 0x7a, 0x1f, 0xba, 0x21,
	0x55, 0xd0, 0x5d, 0x83, 0x6e, 0x5e, 0x08, 0x25, 0xc8, 0xc1, 0x42, 0xe0, 0xae, 0xc5, 0x16, 0x82,
	0x96, 0x13, 0xe9, 0xb0, 0x17, 0x82, 0xa4, 0xcb, 0x2c, 0x91, 0x60, 0xdc, 0xa8, 0x5b, 0xcd, 0x58,
	0xc4, 0x42, 0x1f, 0xbd, 0xf2, 0xb4, 0xa0, 0x7b, 0x90, 0x31, 0x2e, 0x3c, 0xfd, 0x6b, 0x50, 0xfb,
	0x1b, 0xc2, 0xf6, 0x39, 0x2b, 0xd4, 0x08, 0xd2, 0x33, 0x05, 0x43, 0xc6, 0xe3, 0x37, 0x30, 0xee,
	0x43, 0x7e, 0xca, 0x2f, 0x04, 0x69, 0xe1, 0xeb, 0x91, 0xe0, 0xaa, 0x80, 0x48, 0xd9, 0xe8, 0x08,
	0x1d, 0xd7, 0xfd, 0xe5, 0x9d, 0x3c, 0xc1, 0xf5, 0x01, 0x4d, 0x69, 0x0c, 0x8a, 0x0e, 0xec, 0x6b,
	0x47, 0xe8, 0x78, 0xfb, 0xd1, 0x6d, 0xd7, 0xb8, 0x72, 0x4b, 0x57, 0x95, 0x55, 0xb7, 0x2f, 0x18,
	0xef, 0x6d, 0x4c, 0x7e, 0x1d, 0x5a, 0xfe, 0x4a, 0x41, 0xba, 0xb8, 0x16, 0x41, 0x6e, 0xd7, 0xae,
	0x26, 0x2c, 0xdf, 0x9e, 0x6c, 0xfc, 0xfb, 0x72, 0x88, 0xda, 0x53, 0x84, 0xb7, 0xde, 0x42, 0x01,
	0x99, 0x24, 0xe7, 0xf8, 0x96, 0x12, 0x0a, 0xd2, 0xa0, 0x32, 0x25, 0x83, 0x0c, 0xc6, 0x41, 0x99,
	0x17, 0x5d, 0x2d, 0x6f, 0x53, 0xeb, 0xfb, 0x95, 0xdc, 0xb4, 0x4e, 0xee, 0xe0, 0x1b, 0x34, 0x17,
	0x51, 0x12, 0xa4, 0x94, 0xc7, 0x2a, 0xd1, 0xdd, 0xed, 0xf8, 0xdb, 0x9a, 0xbd, 0xd6, 0x88, 0x74,
	0xf0, 0x7e, 0x59, 0x2a, 0x06, 0x19, 0x50, 0x3e, 0x08, 0xc2, 0x54, 0x44, 0x43, 0x5a, 0xe8, 0x76,
	0x76, 0xfc, 0x46, 0x06, 0xe3, 0x97, 0x20, 0x9f, 0xf3, 0x41, 0xcf, 0xf0, 0x93, 0x83, 0xd2, 0xfa,
	0xa7, 0xbf, 0xdf, 0xef, 0xef, 0xaf, 0xfd, 0xfd, 0xa6, 0x8f, 0xf6, 0x0f, 0x84, 0xeb, 0x67, 0x29,
	0xc8, 0x44, 0x0f, 0xfd, 0x01, 0xde, 0x63, 0xfc, 0xa2, 0xf4, 0xc3, 0x04, 0x0f, 0x12, 0xca, 0xe2,
	0xc4, 0x4c, 0xbf, 0xe6, 0x37, 0x56, 0x81, 0x57, 0x9a, 0x93, 0x26, 0xde, 0xcc, 0xc5, 0x47, 0x5a,
	0x68, 0x8f, 0x35, 0xdf, 0x5c, 0xc8, 0x43, 0x4c, 0xcc, 0x60, 0x64, 0x99, 0x35, 0x80, 0x4c, 0x8c,
	0xb8, 0xd2, 0xe6, 0xea, 0x7e, 0x43, 0x47, 0x74, 0xb9, 0x67, 0x9a, 0x93, 0xbb, 0x78, 0xd7, 0xbc,
	0xab, 0x72, 0xdb, 0x1b, 0xfa, 0xe5, 0x8e, 0xa6, 0x2f, 0x16, 0x90, 0xdc, 0xc3, 0x37, 0x15, 0xcb,
	0x68, 0xb0, 0xf2, 0x60, 0x6f, 0xea, 0xa2, 0xbb, 0x25, 0x3e, 0x5d, 0xd2, 0xde, 0xfb, 0xc9, 0x1f,
	0xc7, 0xfa, 0x3a, 0x73, 0xac, 0xc9, 0xcc, 0x41, 0xd3, 0x99, 0x83, 0x7e, 0xcf, 0x1c, 0xf4, 0x79,
	0xee, 0x58, 0xd3, 0xb9, 0x63, 0xfd, 0x9c, 0x3b, 0xd6, 0xbb, 0xa7, 0x31, 0x53, 0xc9, 0x28, 0x74,
	0x23, 0x91, 0x55, 0x7b, 0xd1, 0x49, 0x21, 0x34, 0xcb, 0xd1, 0xa9, 0xc6, 0xd3, 0x91, 0x83, 0xa1,
	0x37, 0x5e, 0x5f, 0x18, 0x75, 0x99, 0x53, 0x19, 0x6e, 0xe9, 0x6f, 0xf7, 0xf1, 0xff, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x1d, 0x59, 0xc6, 0xcb, 0x55, 0x03, 0x00, 0x00,
}

func (this *VirtualStakingMaxCapInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VirtualStakingMaxCapInfo)
	if !ok {
		that2, ok := that.(VirtualStakingMaxCapInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Contract != that1.Contract {
		return false
	}
	if !this.Delegated.Equal(&that1.Delegated) {
		return false
	}
	if !this.Cap.Equal(&that1.Cap) {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TotalContractsMaxCap.Equal(&that1.TotalContractsMaxCap) {
		return false
	}
	if this.EpochLength != that1.EpochLength {
		return false
	}
	if this.MaxGasEndBlocker != that1.MaxGasEndBlocker {
		return false
	}
	return true
}
func (m *VirtualStakingMaxCapInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VirtualStakingMaxCapInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VirtualStakingMaxCapInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Cap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMeshsecurity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Delegated.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMeshsecurity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintMeshsecurity(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxGasEndBlocker != 0 {
		i = encodeVarintMeshsecurity(dAtA, i, uint64(m.MaxGasEndBlocker))
		i--
		dAtA[i] = 0x18
	}
	if m.EpochLength != 0 {
		i = encodeVarintMeshsecurity(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.TotalContractsMaxCap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMeshsecurity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SlashInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeInfraction != 0 {
		i = encodeVarintMeshsecurity(dAtA, i, uint64(m.TimeInfraction))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SlashFraction) > 0 {
		i -= len(m.SlashFraction)
		copy(dAtA[i:], m.SlashFraction)
		i = encodeVarintMeshsecurity(dAtA, i, uint64(len(m.SlashFraction)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalSlashAmount) > 0 {
		i -= len(m.TotalSlashAmount)
		copy(dAtA[i:], m.TotalSlashAmount)
		i = encodeVarintMeshsecurity(dAtA, i, uint64(len(m.TotalSlashAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Power != 0 {
		i = encodeVarintMeshsecurity(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if m.InfractionHeight != 0 {
		i = encodeVarintMeshsecurity(dAtA, i, uint64(m.InfractionHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMeshsecurity(dAtA []byte, offset int, v uint64) int {
	offset -= sovMeshsecurity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VirtualStakingMaxCapInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovMeshsecurity(uint64(l))
	}
	l = m.Delegated.Size()
	n += 1 + l + sovMeshsecurity(uint64(l))
	l = m.Cap.Size()
	n += 1 + l + sovMeshsecurity(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalContractsMaxCap.Size()
	n += 1 + l + sovMeshsecurity(uint64(l))
	if m.EpochLength != 0 {
		n += 1 + sovMeshsecurity(uint64(m.EpochLength))
	}
	if m.MaxGasEndBlocker != 0 {
		n += 1 + sovMeshsecurity(uint64(m.MaxGasEndBlocker))
	}
	return n
}

func (m *SlashInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InfractionHeight != 0 {
		n += 1 + sovMeshsecurity(uint64(m.InfractionHeight))
	}
	if m.Power != 0 {
		n += 1 + sovMeshsecurity(uint64(m.Power))
	}
	l = len(m.TotalSlashAmount)
	if l > 0 {
		n += 1 + l + sovMeshsecurity(uint64(l))
	}
	l = len(m.SlashFraction)
	if l > 0 {
		n += 1 + l + sovMeshsecurity(uint64(l))
	}
	if m.TimeInfraction != 0 {
		n += 1 + sovMeshsecurity(uint64(m.TimeInfraction))
	}
	return n
}

func sovMeshsecurity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMeshsecurity(x uint64) (n int) {
	return sovMeshsecurity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VirtualStakingMaxCapInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshsecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VirtualStakingMaxCapInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VirtualStakingMaxCapInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeshsecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshsecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalContractsMaxCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalContractsMaxCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasEndBlocker", wireType)
			}
			m.MaxGasEndBlocker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasEndBlocker |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeshsecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshsecurity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfractionHeight", wireType)
			}
			m.InfractionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfractionHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSlashAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSlashAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashFraction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInfraction", wireType)
			}
			m.TimeInfraction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInfraction |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeshsecurity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshsecurity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeshsecurity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeshsecurity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeshsecurity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMeshsecurity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMeshsecurity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMeshsecurity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMeshsecurity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeshsecurity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMeshsecurity = fmt.Errorf("proto: unexpected end of group")
)
